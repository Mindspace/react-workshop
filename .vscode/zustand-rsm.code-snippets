{
  "Zustand Reactive Store": {
    "prefix": "rsm-zustand:store",
    "body": [
      "",
      "/* eslint-disable @typescript-eslint/no-explicit-any */",
      "import { StoreApi } from 'zustand/vanilla';",
      "import { InjectionToken, UpdateState, computeWith, initStoreState, makeStore } from '@mindspace/di';",
      "",
      "import { $1Service } from '../api';",
      "import { $1API, $1ComputedState, $1State, $1ViewModel } from './contacts.state';",
      "",
      "// *******************************************************************",
      "// initializers",
      "// *******************************************************************",
      "",
      "const initState = (): $1State => ({",
      "  ...initStoreState(),",
      "  // @Todo - $1State properties initializations here",
      "});",
      "",
      "// *******************************************************************",
      "// Dependency Injection Tokens/Types",
      "// *******************************************************************",
      "",
      "export type $1Store = StoreApi<$1ViewModel>;",
      "export const $1StoreToken = new InjectionToken<$1Store>('$1Store');",
      "",
      "// *******************************************************************",
      "// $1Store Factory",
      "// *******************************************************************",
      "",
      "/**",
      " * Create an instance of the Zustand store engine for $1",
      " */",
      "export function build$1Store(service: $1Service): $1Store {",
      "  // Recalculate our computed properties each time the state changes",
      "  const buildComputedFn = (state: $1State): $1ComputedState => {",
      "    return {",
      "      // @Todo - Derived properties here",
      "    };",
      "  };",
      "",
      "  /**",
      "   * Factory to create a Zustand Reactive $1Store; which emits a $1ViewModel",
      "   * NOTE: the three (3) parameters (set, get, store) are provided by the",
      "   *       Zustand library during createStore(...)",
      "   */",
      "  const configureStore = (",
      "    set: UpdateState<$1State>, // not currently used...",
      "    get: () => $1State, // not currently used... use 'updateState()' instead",
      "    store: $1Store,",
      "  ): $1ViewModel => {",
      "    const updateState = computeWith<$1State>(buildComputedFn, store);",
      "",
      "    const data: $1State = initState(); // Manually build the initial state",
      "    const computed = buildComputedFn(data); // Manually compute the initial computed state",
      "    const api: $1API = {",
      "      // Search on server based on criteria",
      "      // $0 @Todo - $1API methods here",
      "    };",
      "",
      "",
      "    // Publish the initial $1Store view model",
      "    return {",
      "      ...data,",
      "      ...computed,",
      "      ...api,",
      "    };",
      "  };",
      "",
      "  return makeStore<$1ViewModel>(configureStore, 'store:$2');",
      "}",
      "",
    ],
  },
  "Zustand Store URL Sync": {
    "prefix": "rsm-zustand:url-sync",
    "body": [
      "// *******************************************************************",
      "// Singleton instance of the Zustand store engine for $1",
      "// *******************************************************************",
      "",
      "let _store: StoreApi<$1ViewModel>;",
      "",
      "export const store = () => {",
      "  if (!_store) {",
      "    _store = build$1Store();",
      "    syncUrlWithStore(_store);",
      "  }",
      "",
      "  return _store;",
      "};",
      "",
      "export const api = (): $1API => {",
      "  return store().getState();",
      "};",
      "",
      "// *******************************************************************",
      "// Bookmark URL Synchronizer",
      "// *******************************************************************",
      "",
      "const syncUrlWithStore = (_store: StoreApi<$1ViewModel>) => {",
      "  // On app startup, determine if we have a search query in the URL",
      "  const { searchParams } = new URL(document.location.href);",
      "  ",
      "  // @Todo - which url params affect state immediately?",
      "  $0",
      "",
      "  // Whenever the searchQuery changes, update the URL",
      "  _store.subscribe((state) => {",
      "    const { searchQuery } = state;",
      "    const { searchParams } = new URL(document.location.href);",
      "",
      "    // @Todo - which state params should be listed on the URL ?",
      "",
      "    const newUrl = `${window.location.pathname}?${searchParams.toString()}`;",
      "    window.history.replaceState({}, '', newUrl);",
      "  });",
      "};",
      "",
    ],
  },
  "Zustand State": {
    "prefix": "rsm-zustand:state",
    "body": [
      "import { $2 } from '../$2.model';",
      "import { StoreState } from '@mindspace/rsm';",
      "",
      "// *******************************************************************",
      "// Types and initializers",
      "// *******************************************************************",
      "",
      "/**",
      " * This state is serializable",
      " */",
      "export interface $1State extends StoreState {",
      "  all$1: $2[];",
      "}",
      "",
      "/**",
      " * Read-only values computed from existing/updated state",
      " */",
      "export interface $1ComputedState {",
      "  errors: string[];",
      "}",
      "",
      "/**",
      " * This is a simple API meant for use within the",
      " * UI layer html templates",
      " */",
      "export interface $1API {",
      "  $0",
      "}",
      "",
      "export type $1ViewModel = $1State &",
      "  $1API &",
      "  $1ComputedState;",
    ],
  },
}
